
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a3c  08002a3c  00003a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a7c  08002a7c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a7c  08002a7c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a7c  08002a7c  00003a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a80  08002a80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002a90  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002a90  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007737  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191d  00000000  00000000  0000b773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e5  00000000  00000000  0000d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec3a  00000000  00000000  0000de65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093b2  00000000  00000000  0002ca9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b83b6  00000000  00000000  00035e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000ee24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002a24 	.word	0x08002a24

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002a24 	.word	0x08002a24

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e2:	4b1e      	ldr	r3, [pc, #120]	@ (800025c <MX_GPIO_Init+0x90>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001e6:	4a1d      	ldr	r2, [pc, #116]	@ (800025c <MX_GPIO_Init+0x90>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80001ee:	4b1b      	ldr	r3, [pc, #108]	@ (800025c <MX_GPIO_Init+0x90>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fa:	4b18      	ldr	r3, [pc, #96]	@ (800025c <MX_GPIO_Init+0x90>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fe:	4a17      	ldr	r2, [pc, #92]	@ (800025c <MX_GPIO_Init+0x90>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000206:	4b15      	ldr	r3, [pc, #84]	@ (800025c <MX_GPIO_Init+0x90>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800020a:	f003 0302 	and.w	r3, r3, #2
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AG_CS_Pin|MAG_CS_Pin, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	21c0      	movs	r1, #192	@ 0xc0
 8000216:	4812      	ldr	r0, [pc, #72]	@ (8000260 <MX_GPIO_Init+0x94>)
 8000218:	f000 fd1c 	bl	8000c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AG_CS_Pin;
 800021c:	2340      	movs	r3, #64	@ 0x40
 800021e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000220:	2301      	movs	r3, #1
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AG_CS_GPIO_Port, &GPIO_InitStruct);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	4619      	mov	r1, r3
 8000232:	480b      	ldr	r0, [pc, #44]	@ (8000260 <MX_GPIO_Init+0x94>)
 8000234:	f000 fba4 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_CS_Pin;
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000240:	2301      	movs	r3, #1
 8000242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	2300      	movs	r3, #0
 8000246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAG_CS_GPIO_Port, &GPIO_InitStruct);
 8000248:	f107 030c 	add.w	r3, r7, #12
 800024c:	4619      	mov	r1, r3
 800024e:	4804      	ldr	r0, [pc, #16]	@ (8000260 <MX_GPIO_Init+0x94>)
 8000250:	f000 fb96 	bl	8000980 <HAL_GPIO_Init>

}
 8000254:	bf00      	nop
 8000256:	3720      	adds	r7, #32
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40021000 	.word	0x40021000
 8000260:	48000400 	.word	0x48000400

08000264 <main>:

uint8_t txData[2];
uint8_t rxData[2];

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 f99f 	bl	80005aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f830 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f7ff ffac 	bl	80001cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000274:	f000 f878 	bl	8000368 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  txData[0] = 0x0F | READ_FLAG;
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <main+0x5c>)
 800027a:	228f      	movs	r2, #143	@ 0x8f
 800027c:	701a      	strb	r2, [r3, #0]
  txData[1] = 0x00;
 800027e:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <main+0x5c>)
 8000280:	2200      	movs	r2, #0
 8000282:	705a      	strb	r2, [r3, #1]

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(AG_CS_PORT, AG_CS_PIN, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2140      	movs	r1, #64	@ 0x40
 8000288:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <main+0x60>)
 800028a:	f000 fce3 	bl	8000c54 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
 800028e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000292:	2202      	movs	r2, #2
 8000294:	490a      	ldr	r1, [pc, #40]	@ (80002c0 <main+0x5c>)
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <main+0x64>)
 8000298:	f001 fbfb 	bl	8001a92 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, rxData, 2, HAL_MAX_DELAY);
 800029c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002a0:	2202      	movs	r2, #2
 80002a2:	490a      	ldr	r1, [pc, #40]	@ (80002cc <main+0x68>)
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <main+0x64>)
 80002a6:	f001 fd6a 	bl	8001d7e <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(AG_CS_PORT, AG_CS_PIN, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2140      	movs	r1, #64	@ 0x40
 80002ae:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <main+0x60>)
 80002b0:	f000 fcd0 	bl	8000c54 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80002b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b8:	f000 f9ec 	bl	8000694 <HAL_Delay>
	  HAL_GPIO_WritePin(AG_CS_PORT, AG_CS_PIN, GPIO_PIN_RESET);
 80002bc:	bf00      	nop
 80002be:	e7e1      	b.n	8000284 <main+0x20>
 80002c0:	20000028 	.word	0x20000028
 80002c4:	48000400 	.word	0x48000400
 80002c8:	20000030 	.word	0x20000030
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b096      	sub	sp, #88	@ 0x58
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2244      	movs	r2, #68	@ 0x44
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fb74 	bl	80029cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002f6:	f000 fcd3 	bl	8000ca0 <HAL_PWREx_ControlVoltageScaling>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000300:	f000 f82c 	bl	800035c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000304:	2310      	movs	r3, #16
 8000306:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000310:	2360      	movs	r3, #96	@ 0x60
 8000312:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	2300      	movs	r3, #0
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fd15 	bl	8000d4c <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000328:	f000 f818 	bl	800035c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000330:	2300      	movs	r3, #0
 8000332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f001 f915 	bl	8001574 <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000350:	f000 f804 	bl	800035c <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3758      	adds	r7, #88	@ 0x58
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <Error_Handler+0x8>

08000368 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <MX_SPI1_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	@ (80003e0 <MX_SPI1_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <MX_SPI1_Init+0x74>)
 8000374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800037a:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000380:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <MX_SPI1_Init+0x74>)
 8000382:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000388:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_SPI1_Init+0x74>)
 800038a:	2202      	movs	r2, #2
 800038c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800038e:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <MX_SPI1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_SPI1_Init+0x74>)
 8000396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800039a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_SPI1_Init+0x74>)
 800039e:	2208      	movs	r2, #8
 80003a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003b6:	2207      	movs	r2, #7
 80003b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_SPI1_Init+0x74>)
 80003c8:	f001 fac0 	bl	800194c <HAL_SPI_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003d2:	f7ff ffc3 	bl	800035c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000030 	.word	0x20000030
 80003e0:	40013000 	.word	0x40013000

080003e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	@ 0x28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1b      	ldr	r2, [pc, #108]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d130      	bne.n	8000468 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000406:	4b1b      	ldr	r3, [pc, #108]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 8000408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040a:	4a1a      	ldr	r2, [pc, #104]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 800040c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000410:	6613      	str	r3, [r2, #96]	@ 0x60
 8000412:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 8000414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000436:	23c2      	movs	r3, #194	@ 0xc2
 8000438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000442:	2303      	movs	r3, #3
 8000444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000446:	2305      	movs	r3, #5
 8000448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000454:	f000 fa94 	bl	8000980 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	2023      	movs	r0, #35	@ 0x23
 800045e:	f000 fa18 	bl	8000892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000462:	2023      	movs	r0, #35	@ 0x23
 8000464:	f000 fa31 	bl	80008ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	@ 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40013000 	.word	0x40013000
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6613      	str	r3, [r2, #96]	@ 0x60
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	4a08      	ldr	r2, [pc, #32]	@ (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <NMI_Handler+0x4>

080004c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000516:	f000 f89d 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <SPI1_IRQHandler+0x10>)
 8000526:	f001 ff81 	bl	800242c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000030 	.word	0x20000030

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800055c:	f7ff ffea 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	@ (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	@ (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f002 fa29 	bl	80029dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fe6b 	bl	8000264 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000590:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800059c:	08002a84 	.word	0x08002a84
  ldr r2, =_sbss
 80005a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a4:	20000098 	.word	0x20000098

080005a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_IRQHandler>

080005aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f961 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ba:	200f      	movs	r0, #15
 80005bc:	f000 f80e 	bl	80005dc <HAL_InitTick>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e001      	b.n	80005d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005cc:	f7ff ff54 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <HAL_InitTick+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d023      	beq.n	8000638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <HAL_InitTick+0x70>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_InitTick+0x6c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f96d 	bl	80008e6 <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10f      	bne.n	8000632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000620:	f000 f937 	bl	8000892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000624:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <HAL_InitTick+0x74>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e007      	b.n	800063c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e004      	b.n	800063c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e001      	b.n	800063c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000008 	.word	0x20000008
 800064c:	20000000 	.word	0x20000000
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008
 8000678:	20000094 	.word	0x20000094

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000094 	.word	0x20000094

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_Delay+0x44>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0b      	blt.n	800076a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 021f 	and.w	r2, r3, #31
 8000758:	4907      	ldr	r1, [pc, #28]	@ (8000778 <__NVIC_EnableIRQ+0x38>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	@ (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	@ (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	@ 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800085c:	f7ff ff8e 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff29 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff3e 	bl	8000724 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff8e 	bl	80007d0 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5d 	bl	800077c <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff31 	bl	8000740 <__NVIC_EnableIRQ>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffa2 	bl	8000838 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b02      	cmp	r3, #2
 8000914:	d005      	beq.n	8000922 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2204      	movs	r2, #4
 800091a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e029      	b.n	8000976 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 020e 	bic.w	r2, r2, #14
 8000930:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 0201 	bic.w	r2, r2, #1
 8000940:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f003 021c 	and.w	r2, r3, #28
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	4798      	blx	r3
    }
  }
  return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e148      	b.n	8000c22 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 813a 	beq.w	8000c1c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d005      	beq.n	80009c0 <HAL_GPIO_Init+0x40>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	f003 0201 	and.w	r2, r3, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d017      	beq.n	8000a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d123      	bne.n	8000ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	08da      	lsrs	r2, r3, #3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	6939      	ldr	r1, [r7, #16]
 8000aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2203      	movs	r2, #3
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0203 	and.w	r2, r3, #3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8094 	beq.w	8000c1c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b52      	ldr	r3, [pc, #328]	@ (8000c40 <HAL_GPIO_Init+0x2c0>)
 8000af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af8:	4a51      	ldr	r2, [pc, #324]	@ (8000c40 <HAL_GPIO_Init+0x2c0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b00:	4b4f      	ldr	r3, [pc, #316]	@ (8000c40 <HAL_GPIO_Init+0x2c0>)
 8000b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1d4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a43      	ldr	r2, [pc, #268]	@ (8000c48 <HAL_GPIO_Init+0x2c8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1d0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a42      	ldr	r2, [pc, #264]	@ (8000c4c <HAL_GPIO_Init+0x2cc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1cc>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e004      	b.n	8000b56 <HAL_GPIO_Init+0x1d6>
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	e002      	b.n	8000b56 <HAL_GPIO_Init+0x1d6>
 8000b50:	2301      	movs	r3, #1
 8000b52:	e000      	b.n	8000b56 <HAL_GPIO_Init+0x1d6>
 8000b54:	2300      	movs	r3, #0
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	f002 0203 	and.w	r2, r2, #3
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b66:	4937      	ldr	r1, [pc, #220]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b74:	4b36      	ldr	r3, [pc, #216]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b98:	4a2d      	ldr	r2, [pc, #180]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc2:	4a23      	ldr	r2, [pc, #140]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bec:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f47f aeaf 	bne.w	8000990 <HAL_GPIO_Init+0x10>
  }
}
 8000c32:	bf00      	nop
 8000c34:	bf00      	nop
 8000c36:	371c      	adds	r7, #28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4613      	mov	r3, r2
 8000c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c64:	787b      	ldrb	r3, [r7, #1]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c70:	e002      	b.n	8000c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cae:	d130      	bne.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb0:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cbc:	d038      	beq.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ccc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2232      	movs	r2, #50	@ 0x32
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	0c9b      	lsrs	r3, r3, #18
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce4:	e002      	b.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf8:	d102      	bne.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f2      	bne.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d0c:	d110      	bne.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e00f      	b.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d1e:	d007      	beq.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d28:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40007000 	.word	0x40007000
 8000d44:	20000000 	.word	0x20000000
 8000d48:	431bde83 	.word	0x431bde83

08000d4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f000 bc02 	b.w	8001564 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d60:	4b96      	ldr	r3, [pc, #600]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d6a:	4b94      	ldr	r3, [pc, #592]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80e4 	beq.w	8000f4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d007      	beq.n	8000d98 <HAL_RCC_OscConfig+0x4c>
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b0c      	cmp	r3, #12
 8000d8c:	f040 808b 	bne.w	8000ea6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	f040 8087 	bne.w	8000ea6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d98:	4b88      	ldr	r3, [pc, #544]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d005      	beq.n	8000db0 <HAL_RCC_OscConfig+0x64>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e3d9      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	4b81      	ldr	r3, [pc, #516]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <HAL_RCC_OscConfig+0x7e>
 8000dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dc8:	e005      	b.n	8000dd6 <HAL_RCC_OscConfig+0x8a>
 8000dca:	4b7c      	ldr	r3, [pc, #496]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d223      	bcs.n	8000e22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fd54 	bl	800188c <RCC_SetFlashLatencyFromMSIRange>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e3ba      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dee:	4b73      	ldr	r3, [pc, #460]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a72      	ldr	r2, [pc, #456]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b70      	ldr	r3, [pc, #448]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	496d      	ldr	r1, [pc, #436]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4968      	ldr	r1, [pc, #416]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	e025      	b.n	8000e6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e22:	4b66      	ldr	r3, [pc, #408]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a65      	ldr	r2, [pc, #404]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b63      	ldr	r3, [pc, #396]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	4960      	ldr	r1, [pc, #384]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e40:	4b5e      	ldr	r3, [pc, #376]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	495b      	ldr	r1, [pc, #364]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fd14 	bl	800188c <RCC_SetFlashLatencyFromMSIRange>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e37a      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e6e:	f000 fc81 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8000e72:	4602      	mov	r2, r0
 8000e74:	4b51      	ldr	r3, [pc, #324]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	4950      	ldr	r1, [pc, #320]	@ (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000e80:	5ccb      	ldrb	r3, [r1, r3]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc4 <HAL_RCC_OscConfig+0x278>)
 8000e8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc8 <HAL_RCC_OscConfig+0x27c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fba2 	bl	80005dc <HAL_InitTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d052      	beq.n	8000f48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	e35e      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d032      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eae:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a42      	ldr	r2, [pc, #264]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fbdf 	bl	800067c <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fbdb 	bl	800067c <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e347      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ed4:	4b39      	ldr	r3, [pc, #228]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee0:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a35      	ldr	r2, [pc, #212]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4930      	ldr	r1, [pc, #192]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efe:	4b2f      	ldr	r3, [pc, #188]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	492b      	ldr	r1, [pc, #172]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
 8000f12:	e01a      	b.n	8000f4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f14:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a28      	ldr	r2, [pc, #160]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fbac 	bl	800067c <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f28:	f7ff fba8 	bl	800067c <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e314      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f3a:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1dc>
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d073      	beq.n	800103e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x21c>
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d10e      	bne.n	8000f80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d10b      	bne.n	8000f80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d063      	beq.n	800103c <HAL_RCC_OscConfig+0x2f0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d15f      	bne.n	800103c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e2f1      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f88:	d106      	bne.n	8000f98 <HAL_RCC_OscConfig+0x24c>
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e025      	b.n	8000fe4 <HAL_RCC_OscConfig+0x298>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fa0:	d114      	bne.n	8000fcc <HAL_RCC_OscConfig+0x280>
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a02      	ldr	r2, [pc, #8]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e013      	b.n	8000fe4 <HAL_RCC_OscConfig+0x298>
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	08002a3c 	.word	0x08002a3c
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	4ba0      	ldr	r3, [pc, #640]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a9f      	ldr	r2, [pc, #636]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b9d      	ldr	r3, [pc, #628]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a9c      	ldr	r2, [pc, #624]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb46 	bl	800067c <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fb42 	bl	800067c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	@ 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e2ae      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	4b92      	ldr	r3, [pc, #584]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x2a8>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fb32 	bl	800067c <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fb2e 	bl	800067c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	@ 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e29a      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102e:	4b88      	ldr	r3, [pc, #544]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x2d0>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d060      	beq.n	800110c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x310>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d119      	bne.n	800108a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d116      	bne.n	800108a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105c:	4b7c      	ldr	r3, [pc, #496]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_OscConfig+0x328>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e277      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b76      	ldr	r3, [pc, #472]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	4973      	ldr	r1, [pc, #460]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001088:	e040      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d023      	beq.n	80010da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001092:	4b6f      	ldr	r3, [pc, #444]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6e      	ldr	r2, [pc, #440]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109e:	f7ff faed 	bl	800067c <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fae9 	bl	800067c <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e255      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b8:	4b65      	ldr	r3, [pc, #404]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b62      	ldr	r3, [pc, #392]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	495f      	ldr	r1, [pc, #380]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e018      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b5d      	ldr	r3, [pc, #372]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a5c      	ldr	r2, [pc, #368]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80010e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fac9 	bl	800067c <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fac5 	bl	800067c <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e231      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001100:	4b53      	ldr	r3, [pc, #332]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03c      	beq.n	8001192 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01c      	beq.n	800115a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001120:	4b4b      	ldr	r3, [pc, #300]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001126:	4a4a      	ldr	r2, [pc, #296]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff faa4 	bl	800067c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff faa0 	bl	800067c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e20c      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114a:	4b41      	ldr	r3, [pc, #260]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 800114c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ef      	beq.n	8001138 <HAL_RCC_OscConfig+0x3ec>
 8001158:	e01b      	b.n	8001192 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001160:	4a3b      	ldr	r2, [pc, #236]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff fa87 	bl	800067c <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff fa83 	bl	800067c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e1ef      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001184:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ef      	bne.n	8001172 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80a6 	beq.w	80012ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10d      	bne.n	80011cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	4a26      	ldr	r2, [pc, #152]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c8:	2301      	movs	r3, #1
 80011ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011cc:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <HAL_RCC_OscConfig+0x508>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d118      	bne.n	800120a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <HAL_RCC_OscConfig+0x508>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001254 <HAL_RCC_OscConfig+0x508>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fa4a 	bl	800067c <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ec:	f7ff fa46 	bl	800067c <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1b2      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_RCC_OscConfig+0x508>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_RCC_OscConfig+0x4d8>
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001222:	e029      	b.n	8001278 <HAL_RCC_OscConfig+0x52c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d115      	bne.n	8001258 <HAL_RCC_OscConfig+0x50c>
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001232:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001242:	4a03      	ldr	r2, [pc, #12]	@ (8001250 <HAL_RCC_OscConfig+0x504>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x52c>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	4b9a      	ldr	r3, [pc, #616]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125e:	4a99      	ldr	r2, [pc, #612]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001268:	4b96      	ldr	r3, [pc, #600]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126e:	4a95      	ldr	r2, [pc, #596]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d016      	beq.n	80012ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff f9fc 	bl	800067c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	e00a      	b.n	800129e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff f9f8 	bl	800067c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e162      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129e:	4b89      	ldr	r3, [pc, #548]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 80012a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0ed      	beq.n	8001288 <HAL_RCC_OscConfig+0x53c>
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff f9e5 	bl	800067c <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff f9e1 	bl	800067c <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e14b      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012cc:	4b7d      	ldr	r3, [pc, #500]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ed      	bne.n	80012b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4b78      	ldr	r3, [pc, #480]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e4:	4a77      	ldr	r2, [pc, #476]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 80012e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03c      	beq.n	8001372 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01c      	beq.n	800133a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001300:	4b70      	ldr	r3, [pc, #448]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001306:	4a6f      	ldr	r2, [pc, #444]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff f9b4 	bl	800067c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001318:	f7ff f9b0 	bl	800067c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e11c      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800132a:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800132c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ef      	beq.n	8001318 <HAL_RCC_OscConfig+0x5cc>
 8001338:	e01b      	b.n	8001372 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800133a:	4b62      	ldr	r3, [pc, #392]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800133c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001340:	4a60      	ldr	r2, [pc, #384]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134a:	f7ff f997 	bl	800067c <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001352:	f7ff f993 	bl	800067c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0ff      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001364:	4b57      	ldr	r3, [pc, #348]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ef      	bne.n	8001352 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80f3 	beq.w	8001562 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001380:	2b02      	cmp	r3, #2
 8001382:	f040 80c9 	bne.w	8001518 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001386:	4b4f      	ldr	r3, [pc, #316]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001396:	429a      	cmp	r2, r3
 8001398:	d12c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	3b01      	subs	r3, #1
 80013a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d123      	bne.n	80013f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d11b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d113      	bne.n	80013f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	3b01      	subs	r3, #1
 80013da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013dc:	429a      	cmp	r2, r3
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d06b      	beq.n	80014cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d062      	beq.n	80014c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013fa:	4b32      	ldr	r3, [pc, #200]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0ac      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800140a:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2d      	ldr	r2, [pc, #180]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001414:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001416:	f7ff f931 	bl	800067c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff f92d 	bl	800067c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e099      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_RCC_OscConfig+0x77c>)
 8001442:	4013      	ands	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800144c:	3a01      	subs	r2, #1
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	4311      	orrs	r1, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001456:	0212      	lsls	r2, r2, #8
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800145e:	0852      	lsrs	r2, r2, #1
 8001460:	3a01      	subs	r2, #1
 8001462:	0552      	lsls	r2, r2, #21
 8001464:	4311      	orrs	r1, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800146a:	0852      	lsrs	r2, r2, #1
 800146c:	3a01      	subs	r2, #1
 800146e:	0652      	lsls	r2, r2, #25
 8001470:	4311      	orrs	r1, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001476:	06d2      	lsls	r2, r2, #27
 8001478:	430a      	orrs	r2, r1
 800147a:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a0c      	ldr	r2, [pc, #48]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001496:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001498:	f7ff f8f0 	bl	800067c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff f8ec 	bl	800067c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e058      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <HAL_RCC_OscConfig+0x778>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014be:	e050      	b.n	8001562 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e04f      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
 80014c4:	40021000 	.word	0x40021000
 80014c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014cc:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d144      	bne.n	8001562 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a23      	ldr	r2, [pc, #140]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a20      	ldr	r2, [pc, #128]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014f0:	f7ff f8c4 	bl	800067c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f8c0 	bl	800067c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e02c      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x7ac>
 8001516:	e024      	b.n	8001562 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d01f      	beq.n	800155e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 8001524:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff f8a7 	bl	800067c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f8a3 	bl	800067c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e00f      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	4905      	ldr	r1, [pc, #20]	@ (800156c <HAL_RCC_OscConfig+0x820>)
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_RCC_OscConfig+0x824>)
 8001558:	4013      	ands	r3, r2
 800155a:	60cb      	str	r3, [r1, #12]
 800155c:	e001      	b.n	8001562 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	feeefffc 	.word	0xfeeefffc

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0e7      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d910      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b72      	ldr	r3, [pc, #456]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	4970      	ldr	r1, [pc, #448]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0cf      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d010      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4b66      	ldr	r3, [pc, #408]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d908      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b63      	ldr	r3, [pc, #396]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4960      	ldr	r1, [pc, #384]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d04c      	beq.n	800168c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d121      	bne.n	800164a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0a6      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001612:	4b54      	ldr	r3, [pc, #336]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d115      	bne.n	800164a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e09a      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162a:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e08e      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163a:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e086      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800164a:	4b46      	ldr	r3, [pc, #280]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 0203 	bic.w	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4943      	ldr	r1, [pc, #268]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800165c:	f7ff f80e 	bl	800067c <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	e00a      	b.n	800167a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	f7ff f80a 	bl	800067c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e06e      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 020c 	and.w	r2, r3, #12
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	429a      	cmp	r2, r3
 800168a:	d1eb      	bne.n	8001664 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d010      	beq.n	80016ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d208      	bcs.n	80016ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	492b      	ldr	r1, [pc, #172]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ba:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d210      	bcs.n	80016ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 0207 	bic.w	r2, r3, #7
 80016d0:	4923      	ldr	r1, [pc, #140]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d8:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <HAL_RCC_ClockConfig+0x1ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e036      	b.n	8001758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	4918      	ldr	r1, [pc, #96]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4910      	ldr	r1, [pc, #64]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001728:	f000 f824 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	490b      	ldr	r1, [pc, #44]	@ (8001768 <HAL_RCC_ClockConfig+0x1f4>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a09      	ldr	r2, [pc, #36]	@ (800176c <HAL_RCC_ClockConfig+0x1f8>)
 8001746:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_RCC_ClockConfig+0x1fc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff45 	bl	80005dc <HAL_InitTick>
 8001752:	4603      	mov	r3, r0
 8001754:	72fb      	strb	r3, [r7, #11]

  return status;
 8001756:	7afb      	ldrb	r3, [r7, #11]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40022000 	.word	0x40022000
 8001764:	40021000 	.word	0x40021000
 8001768:	08002a3c 	.word	0x08002a3c
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001782:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178c:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x34>
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d121      	bne.n	80017e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d11e      	bne.n	80017e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017a8:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017b4:	4b31      	ldr	r3, [pc, #196]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e005      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d102      	bne.n	80017f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	e004      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f8:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x114>)
 80017fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d134      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0xa6>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d003      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0xac>
 8001818:	e005      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x110>)
 800181c:	617b      	str	r3, [r7, #20]
      break;
 800181e:	e005      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x114>)
 8001822:	617b      	str	r3, [r7, #20]
      break;
 8001824:	e002      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	617b      	str	r3, [r7, #20]
      break;
 800182a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	3301      	adds	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	0e5b      	lsrs	r3, r3, #25
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	3301      	adds	r3, #1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800186c:	69bb      	ldr	r3, [r7, #24]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	08002a4c 	.word	0x08002a4c
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001898:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018a4:	f7ff f9ee 	bl	8000c84 <HAL_PWREx_GetVoltageRange>
 80018a8:	6178      	str	r0, [r7, #20]
 80018aa:	e014      	b.n	80018d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b8:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018c4:	f7ff f9de 	bl	8000c84 <HAL_PWREx_GetVoltageRange>
 80018c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018dc:	d10b      	bne.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b80      	cmp	r3, #128	@ 0x80
 80018e2:	d919      	bls.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80018e8:	d902      	bls.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	e013      	b.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018f0:	2301      	movs	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e010      	b.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b80      	cmp	r3, #128	@ 0x80
 80018fa:	d902      	bls.n	8001902 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018fc:	2303      	movs	r3, #3
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	e00a      	b.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b80      	cmp	r3, #128	@ 0x80
 8001906:	d102      	bne.n	800190e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	e004      	b.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b70      	cmp	r3, #112	@ 0x70
 8001912:	d101      	bne.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 0207 	bic.w	r2, r3, #7
 8001920:	4909      	ldr	r1, [pc, #36]	@ (8001948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e095      	b.n	8001a8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800196e:	d009      	beq.n	8001984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
 8001976:	e005      	b.n	8001984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fd20 	bl	80003e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80019c4:	d902      	bls.n	80019cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e002      	b.n	80019d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80019cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80019da:	d007      	beq.n	80019ec <HAL_SPI_Init+0xa0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80019e4:	d002      	beq.n	80019ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2e:	ea42 0103 	orr.w	r1, r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	f003 0204 	and.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001a68:	ea42 0103 	orr.w	r1, r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b088      	sub	sp, #32
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa2:	f7fe fdeb 	bl	800067c <HAL_GetTick>
 8001aa6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d001      	beq.n	8001abc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e15c      	b.n	8001d76 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_SPI_Transmit+0x36>
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e154      	b.n	8001d76 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_SPI_Transmit+0x48>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e14d      	b.n	8001d76 <HAL_SPI_Transmit+0x2e4>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b2c:	d10f      	bne.n	8001b4e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b58:	2b40      	cmp	r3, #64	@ 0x40
 8001b5a:	d007      	beq.n	8001b6c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b74:	d952      	bls.n	8001c1c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_SPI_Transmit+0xf2>
 8001b7e:	8b7b      	ldrh	r3, [r7, #26]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d145      	bne.n	8001c10 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b94:	1c9a      	adds	r2, r3, #2
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ba8:	e032      	b.n	8001c10 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d112      	bne.n	8001bde <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc8:	1c9a      	adds	r2, r3, #2
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001bdc:	e018      	b.n	8001c10 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bde:	f7fe fd4d 	bl	800067c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d803      	bhi.n	8001bf6 <HAL_SPI_Transmit+0x164>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bf4:	d102      	bne.n	8001bfc <HAL_SPI_Transmit+0x16a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0b2      	b.n	8001d76 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1c7      	bne.n	8001baa <HAL_SPI_Transmit+0x118>
 8001c1a:	e083      	b.n	8001d24 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_SPI_Transmit+0x198>
 8001c24:	8b7b      	ldrh	r3, [r7, #26]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d177      	bne.n	8001d1a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d912      	bls.n	8001c5a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c44:	1c9a      	adds	r2, r3, #2
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b02      	subs	r3, #2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c58:	e05f      	b.n	8001d1a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	330c      	adds	r3, #12
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c80:	e04b      	b.n	8001d1a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d12b      	bne.n	8001ce8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d912      	bls.n	8001cc0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001caa:	1c9a      	adds	r2, r3, #2
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b02      	subs	r3, #2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001cbe:	e02c      	b.n	8001d1a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ce6:	e018      	b.n	8001d1a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ce8:	f7fe fcc8 	bl	800067c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d803      	bhi.n	8001d00 <HAL_SPI_Transmit+0x26e>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cfe:	d102      	bne.n	8001d06 <HAL_SPI_Transmit+0x274>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e02d      	b.n	8001d76 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ae      	bne.n	8001c82 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fe09 	bl	8002940 <SPI_EndRxTxTransaction>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b088      	sub	sp, #32
 8001d82:	af02      	add	r7, sp, #8
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e123      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001da6:	d112      	bne.n	8001dce <HAL_SPI_Receive+0x50>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10e      	bne.n	8001dce <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2204      	movs	r2, #4
 8001db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f912 	bl	8001fee <HAL_SPI_TransmitReceive>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	e10b      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dce:	f7fe fc55 	bl	800067c <HAL_GetTick>
 8001dd2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_SPI_Receive+0x62>
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e100      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_SPI_Receive+0x74>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0f9      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	88fa      	ldrh	r2, [r7, #6]
 8001e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e44:	d908      	bls.n	8001e58 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	e007      	b.n	8001e68 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e66:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e70:	d10f      	bne.n	8001e92 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9c:	2b40      	cmp	r3, #64	@ 0x40
 8001e9e:	d007      	beq.n	8001eb0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001eb8:	d875      	bhi.n	8001fa6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001eba:	e037      	b.n	8001f2c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d117      	bne.n	8001efa <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f103 020c 	add.w	r2, r3, #12
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	7812      	ldrb	r2, [r2, #0]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8001ef8:	e018      	b.n	8001f2c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001efa:	f7fe fbbf 	bl	800067c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d803      	bhi.n	8001f12 <HAL_SPI_Receive+0x194>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f10:	d102      	bne.n	8001f18 <HAL_SPI_Receive+0x19a>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e05c      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1c1      	bne.n	8001ebc <HAL_SPI_Receive+0x13e>
 8001f38:	e03b      	b.n	8001fb2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d115      	bne.n	8001f74 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	b292      	uxth	r2, r2
 8001f54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8001f72:	e018      	b.n	8001fa6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f74:	f7fe fb82 	bl	800067c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d803      	bhi.n	8001f8c <HAL_SPI_Receive+0x20e>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f8a:	d102      	bne.n	8001f92 <HAL_SPI_Receive+0x214>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e01f      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1c3      	bne.n	8001f3a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fc6a 	bl	8002890 <SPI_EndRxTransaction>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b08a      	sub	sp, #40	@ 0x28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002000:	f7fe fb3c 	bl	800067c <HAL_GetTick>
 8002004:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800200c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d00c      	beq.n	800203c <HAL_SPI_TransmitReceive+0x4e>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002028:	d106      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x4a>
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d001      	beq.n	800203c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
 800203a:	e1f3      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_SPI_TransmitReceive+0x60>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_SPI_TransmitReceive+0x60>
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1e8      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x72>
 800205c:	2302      	movs	r3, #2
 800205e:	e1e1      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b04      	cmp	r3, #4
 8002072:	d003      	beq.n	800207c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2205      	movs	r2, #5
 8002078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	887a      	ldrh	r2, [r7, #2]
 80020a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020be:	d802      	bhi.n	80020c6 <HAL_SPI_TransmitReceive+0xd8>
 80020c0:	8abb      	ldrh	r3, [r7, #20]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d908      	bls.n	80020d8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e007      	b.n	80020e8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d007      	beq.n	8002106 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800210e:	f240 8083 	bls.w	8002218 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_SPI_TransmitReceive+0x132>
 800211a:	8afb      	ldrh	r3, [r7, #22]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d16f      	bne.n	8002200 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002130:	1c9a      	adds	r2, r3, #2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002144:	e05c      	b.n	8002200 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11b      	bne.n	800218c <HAL_SPI_TransmitReceive+0x19e>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_SPI_TransmitReceive+0x19e>
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d113      	bne.n	800218c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	1c9a      	adds	r2, r3, #2
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d11c      	bne.n	80021d4 <HAL_SPI_TransmitReceive+0x1e6>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d016      	beq.n	80021d4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	b292      	uxth	r2, r2
 80021b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	1c9a      	adds	r2, r3, #2
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021d0:	2301      	movs	r3, #1
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021d4:	f7fe fa52 	bl	800067c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d80d      	bhi.n	8002200 <HAL_SPI_TransmitReceive+0x212>
 80021e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ea:	d009      	beq.n	8002200 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e111      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d19d      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x158>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d197      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x158>
 8002216:	e0e5      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_SPI_TransmitReceive+0x23a>
 8002220:	8afb      	ldrh	r3, [r7, #22]
 8002222:	2b01      	cmp	r3, #1
 8002224:	f040 80d1 	bne.w	80023ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d912      	bls.n	8002258 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b02      	subs	r3, #2
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002256:	e0b8      	b.n	80023ca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800227e:	e0a4      	b.n	80023ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d134      	bne.n	80022f8 <HAL_SPI_TransmitReceive+0x30a>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02f      	beq.n	80022f8 <HAL_SPI_TransmitReceive+0x30a>
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	2b01      	cmp	r3, #1
 800229c:	d12c      	bne.n	80022f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d912      	bls.n	80022ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b02      	subs	r3, #2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022cc:	e012      	b.n	80022f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	330c      	adds	r3, #12
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d148      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x3aa>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d042      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d923      	bls.n	8002366 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	b292      	uxth	r2, r2
 800232a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b02      	subs	r3, #2
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d81f      	bhi.n	8002394 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e016      	b.n	8002394 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f103 020c 	add.w	r2, r3, #12
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002394:	2301      	movs	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002398:	f7fe f970 	bl	800067c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d803      	bhi.n	80023b0 <HAL_SPI_TransmitReceive+0x3c2>
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ae:	d102      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x3c8>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e02c      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f47f af55 	bne.w	8002280 <HAL_SPI_TransmitReceive+0x292>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f af4e 	bne.w	8002280 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 faa9 	bl	8002940 <SPI_EndRxTxTransaction>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e00e      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002422:	2300      	movs	r3, #0
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3728      	adds	r7, #40	@ 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
    return;
 800246a:	e0ce      	b.n	800260a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_SPI_IRQHandler+0x5e>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
    return;
 8002488:	e0bf      	b.n	800260a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_SPI_IRQHandler+0x7e>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80b0 	beq.w	800260a <HAL_SPI_IRQHandler+0x1de>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80aa 	beq.w	800260a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d011      	beq.n	80024f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	e00b      	b.n	8002508 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
        return;
 8002506:	e080      	b.n	800260a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	f043 0208 	orr.w	r2, r3, #8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002564:	2b00      	cmp	r3, #0
 8002566:	d04f      	beq.n	8002608 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002576:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_SPI_IRQHandler+0x168>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d034      	beq.n	80025fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0203 	bic.w	r2, r2, #3
 80025a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d011      	beq.n	80025d0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	4a17      	ldr	r2, [pc, #92]	@ (8002610 <HAL_SPI_IRQHandler+0x1e4>)
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe f9a0 	bl	80008fe <HAL_DMA_Abort_IT>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002610 <HAL_SPI_IRQHandler+0x1e4>)
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe f98a 	bl	80008fe <HAL_DMA_Abort_IT>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80025fc:	e003      	b.n	8002606 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f808 	bl	8002614 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002604:	e000      	b.n	8002608 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002606:	bf00      	nop
    return;
 8002608:	bf00      	nop
  }
}
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	08002629 	.word	0x08002629

08002614 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff ffe5 	bl	8002614 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002664:	f7fe f80a 	bl	800067c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002674:	f7fe f802 	bl	800067c <HAL_GetTick>
 8002678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800267a:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	0d1b      	lsrs	r3, r3, #20
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268a:	e054      	b.n	8002736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002692:	d050      	beq.n	8002736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002694:	f7fd fff2 	bl	800067c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d902      	bls.n	80026aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d13d      	bne.n	8002726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026c2:	d111      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026cc:	d004      	beq.n	80026d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d6:	d107      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f0:	d10f      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e017      	b.n	8002756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3b01      	subs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4013      	ands	r3, r2
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	429a      	cmp	r2, r3
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	429a      	cmp	r2, r3
 8002752:	d19b      	bne.n	800268c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000

08002764 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002776:	f7fd ff81 	bl	800067c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	4413      	add	r3, r2
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002786:	f7fd ff79 	bl	800067c <HAL_GetTick>
 800278a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002794:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	0d1b      	lsrs	r3, r3, #20
 80027a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80027ac:	e060      	b.n	8002870 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80027b4:	d107      	bne.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027cc:	d050      	beq.n	8002870 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027ce:	f7fd ff55 	bl	800067c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027da:	429a      	cmp	r2, r3
 80027dc:	d902      	bls.n	80027e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d13d      	bne.n	8002860 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027fc:	d111      	bne.n	8002822 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002806:	d004      	beq.n	8002812 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002810:	d107      	bne.n	8002822 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002820:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800282a:	d10f      	bne.n	800284c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800284a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e010      	b.n	8002882 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3b01      	subs	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d196      	bne.n	80027ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000000 	.word	0x20000000

08002890 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a4:	d111      	bne.n	80028ca <SPI_EndRxTransaction+0x3a>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ae:	d004      	beq.n	80028ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b8:	d107      	bne.n	80028ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff febd 	bl	8002654 <SPI_WaitFlagStateUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e023      	b.n	8002938 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028f8:	d11d      	bne.n	8002936 <SPI_EndRxTransaction+0xa6>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002902:	d004      	beq.n	800290e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800290c:	d113      	bne.n	8002936 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff ff22 	bl	8002764 <SPI_WaitFifoStateUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e000      	b.n	8002938 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff ff03 	bl	8002764 <SPI_WaitFifoStateUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e027      	b.n	80029c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2200      	movs	r2, #0
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fe68 	bl	8002654 <SPI_WaitFlagStateUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e014      	b.n	80029c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff fedc 	bl	8002764 <SPI_WaitFifoStateUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e000      	b.n	80029c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <memset>:
 80029cc:	4402      	add	r2, r0
 80029ce:	4603      	mov	r3, r0
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d100      	bne.n	80029d6 <memset+0xa>
 80029d4:	4770      	bx	lr
 80029d6:	f803 1b01 	strb.w	r1, [r3], #1
 80029da:	e7f9      	b.n	80029d0 <memset+0x4>

080029dc <__libc_init_array>:
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	4d0d      	ldr	r5, [pc, #52]	@ (8002a14 <__libc_init_array+0x38>)
 80029e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002a18 <__libc_init_array+0x3c>)
 80029e2:	1b64      	subs	r4, r4, r5
 80029e4:	10a4      	asrs	r4, r4, #2
 80029e6:	2600      	movs	r6, #0
 80029e8:	42a6      	cmp	r6, r4
 80029ea:	d109      	bne.n	8002a00 <__libc_init_array+0x24>
 80029ec:	4d0b      	ldr	r5, [pc, #44]	@ (8002a1c <__libc_init_array+0x40>)
 80029ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002a20 <__libc_init_array+0x44>)
 80029f0:	f000 f818 	bl	8002a24 <_init>
 80029f4:	1b64      	subs	r4, r4, r5
 80029f6:	10a4      	asrs	r4, r4, #2
 80029f8:	2600      	movs	r6, #0
 80029fa:	42a6      	cmp	r6, r4
 80029fc:	d105      	bne.n	8002a0a <__libc_init_array+0x2e>
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
 8002a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a04:	4798      	blx	r3
 8002a06:	3601      	adds	r6, #1
 8002a08:	e7ee      	b.n	80029e8 <__libc_init_array+0xc>
 8002a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0e:	4798      	blx	r3
 8002a10:	3601      	adds	r6, #1
 8002a12:	e7f2      	b.n	80029fa <__libc_init_array+0x1e>
 8002a14:	08002a7c 	.word	0x08002a7c
 8002a18:	08002a7c 	.word	0x08002a7c
 8002a1c:	08002a7c 	.word	0x08002a7c
 8002a20:	08002a80 	.word	0x08002a80

08002a24 <_init>:
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	bf00      	nop
 8002a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2a:	bc08      	pop	{r3}
 8002a2c:	469e      	mov	lr, r3
 8002a2e:	4770      	bx	lr

08002a30 <_fini>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr
